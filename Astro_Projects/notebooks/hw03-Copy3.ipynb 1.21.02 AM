{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5c784ad9",
   "metadata": {
    "id": "lgTo8qRPumw6"
   },
   "source": [
    "## <font color='blue'> ASTR 21100</font>\n",
    "\n",
    "## <font color='blue'> Homework Assignment 3</font>\n",
    "    \n",
    "## <font color='blue'>Bootstrap resampling, implementing Differential Evolution algorithm and using it to estimate the mean density of matter and dark energy in our Universe</font>\n",
    "\n",
    "## <font color='blue'> (30 points + 6 extra-credit points)</font>\n",
    "    \n",
    "### <font color='blue'> Distributed: Friday, January 24</font>\n",
    "\n",
    "### <font color='blue'> Due: Friday, January 31, 10pm</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37023aab",
   "metadata": {},
   "source": [
    "### Introduction\n",
    "\n",
    "This homework assignment involves an exercise on using bootstrap resampling method for estimating uncertainty for a quantity calculated from a data sample (exercise 1). \n",
    "\n",
    "In exercise 2 you will implement the differential evolution (DE) algorithm and test it using the Rosenbrock function. Exercise 3 is optional (extra-credit) and involves implementation and testing of the crossover stage of the DE algorithm. \n",
    "\n",
    "In exercise 4 you will apply the DE algorithm to find the values of $M_0$, $\\Omega_{\\rm m0}$ and $\\Omega_\\Lambda$ that describe the supernovae type Ia sample from hw 3 best by minimizing an \"objective function\" $\\chi^2$ that computes the square of the weighted difference between predicted and observed apparent magnitudes of supernovae and thus depends on these parameters. \n",
    "\n",
    "DE and its implementation were discussed briefly in class on Thu, Jan 23 and will additionally be discussed in class on Tue, Jan 28. Note that to set up exercise 4 before implementing your own DE function, you can use SciPy's `differential_evolution` function to find the minimum. In the end, though, you should use your own DE implementation to get the parameters that minimize the function in exercise 4. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36bb6536",
   "metadata": {},
   "source": [
    "import packages needed by the codes below. Run this cell first before using these codes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "51d3ef2b",
   "metadata": {
    "id": "sWslcJJXumxC"
   },
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "\n",
    "# use jupyter \"magic\" command to tell it to embed plot into the notebook \n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "# the following code make plots look better\n",
    "def plot_prettier(dpi=150, fontsize=11, usetex=False): \n",
    "    '''\n",
    "    Make plots look nicer compared to Matplotlib defaults\n",
    "    Parameters: \n",
    "        dpi - int, \"dots per inch\" - controls resolution of PNG images that are produced\n",
    "                by Matplotlib\n",
    "        fontsize - int, font size to use overall\n",
    "        usetex - bool, whether to use LaTeX to render fonds of axes labels \n",
    "                use False if you don't have LaTeX installed on your system\n",
    "    '''\n",
    "    plt.rcParams['figure.dpi']= dpi\n",
    "    plt.rc(\"savefig\", dpi=dpi)\n",
    "    plt.rc('font', size=fontsize)\n",
    "    plt.rc('xtick', direction='in') \n",
    "    plt.rc('ytick', direction='in')\n",
    "    plt.rc('xtick.major', pad=5) \n",
    "    plt.rc('xtick.minor', pad=5)\n",
    "    plt.rc('ytick.major', pad=5) \n",
    "    plt.rc('ytick.minor', pad=5)\n",
    "    plt.rc('lines', dotted_pattern = [2., 2.])\n",
    "    if usetex:\n",
    "        plt.rc('text', usetex=usetex)\n",
    "    else:\n",
    "        plt.rcParams['mathtext.fontset'] = 'cm'\n",
    "        plt.rcParams['font.family'] = 'serif'\n",
    "        plt.rcParams['font.serif'] = ['Times New Roman'] + plt.rcParams['font.serif']\n",
    "\n",
    "def plot_pdf(xr, plot_pdf=True, func=None, args=None,\n",
    "             xlabel='$x$', ylabel='$p(x)$',  label='samples', pdf_label=r'\\rm target pdf',\n",
    "             bins = 50, xlog=False, ylog=True, \n",
    "             xlims=[0.,30.], ylims=[1.e-6, 0.4], figsize=5):\n",
    "    \"\"\"\n",
    "    a utility function to plot samples from a pdf as a histogram and compare\n",
    "    the histogram to the analytical form of the pdf plotted as a line, if needed\n",
    "    \n",
    "    Parameters:\n",
    "    -----------\n",
    "    xr:           1d numpy array of float numbers: vector of samples\n",
    "    plot_pdf:     boolean, determines whether to plot a line of the target pdf\n",
    "                  if True, func needs to be supplied\n",
    "    func:         Python function object: function that returns analytic pdf for a given vector xr\n",
    "    args:         list of possible arguments to func, if any\n",
    "    xlabel, ylabel: strings, labels for x and y axes\n",
    "    label:        string, label for the samples histogram for the legend\n",
    "    bins:         integer or string (e.g., 'auto'), passed on as bins parameter to Pylab's histogram function\n",
    "    xlog, ylog:   boolean, determine whether x or y axis is to be plotted on logarithmic scale\n",
    "    xlims, ylims: lists of 2 float elements defining plot limits for x and y axes\n",
    "    figsize:      float, parameter controlling plot size \n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "        Nada\n",
    "    \"\"\"\n",
    "    plt.figure(figsize=(figsize,figsize))\n",
    "    plt.xlabel(xlabel); plt.ylabel(ylabel)\n",
    "    if xlog: plt.xscale('log') # plot y-values on a logarithmic scale\n",
    "    if ylog: plt.yscale('log') # plot y-values on a logarithmic scale\n",
    "    plt.xlim(xlims); plt.ylim(ylims) # set axis limits \n",
    "\n",
    "    # compute histogram values; \n",
    "    # density='True' normalizes histogram properly so it can be compared to pdf\n",
    "    hist, bins, patches = plt.hist(xr, density='True', color='slateblue', bins=bins, label=label)\n",
    "    # compute bin centers using numpy slicing \n",
    "    binc = 0.5*(bins[1:] + bins[:-1])\n",
    "    if plot_pdf: \n",
    "        plt.plot(binc, func(binc, *args), lw=1.25, c='orangered', label=pdf_label)\n",
    "    plt.legend(loc='best', frameon=False, fontsize=3*figsize)\n",
    "    plt.show()\n",
    "    \n",
    "def plot_xy(x, y, xlab='x', ylab='y', figsize=(3,3), xlim = [-5, 5], ylim = [-5, 5]):\n",
    "    '''\n",
    "    Make a simple scatter plots of values in input arrays x and y \n",
    "    showing points as dots \n",
    "    '''\n",
    "    plt.figure(figsize = figsize) # define figure and its dimensions\n",
    "    plt.xlabel(xlab); plt.ylabel(ylab) # x and y axes labels\n",
    "    plt.xlim(xlim); plt.ylim(ylim)\n",
    "    plt.scatter(x, y, marker = '.', s = 2, c = 'darkslateblue')\n",
    "    plt.grid(ls = 'dotted')\n",
    "    plt.show()\n",
    "    \n",
    "def gaussian_pdf(x, mu=0., sigma=1.):\n",
    "    \"\"\"\n",
    "    returns value of the Gaussian pdf with input mu, sigma for input x \n",
    "\n",
    "    Parameters:\n",
    "        x:     a float or a 1d numpy array of floats, input x value(s)\n",
    "        mu:    a float, mean of the Gaussian (default 0)\n",
    "        sigma: a float, st. deviation of the Gaussian (default 1.0)\n",
    "    \n",
    "    Returns:\n",
    "        g(x): a float or a 1d numpy array of floats, \n",
    "              value(s) of the Gaussian pdf for input x value(s)\n",
    "    \"\"\"\n",
    "    assert(sigma !=0.)\n",
    "\n",
    "    return 1./np.sqrt(2.*np.pi)/sigma * np.exp(-0.5*((x-mu)/sigma)**2)\n",
    "\n",
    "\n",
    "plot_prettier()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e52f328",
   "metadata": {},
   "source": [
    "### <font color='blue'>Exercise 1 (6 points + 2 extra-credit): estimating uncertainty of the correlation coefficient of two sequences of random numbers using bootstrap method</font>\n",
    "    \n",
    "**Background:** the function below computes the correlation coefficient for two samples. The concept of the correlation and correlation coefficient as a measure of how much two sequences of numbers are correlated was introduced in class (see notebook [04_mc_methods](https://drive.google.com/file/d/1AsHf8nY03fE77cLrzZadRjvp0IgOIe5o/view?usp=sharing)). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "90799a33",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rcorr(x, y):\n",
    "    '''\n",
    "    Compute the correlation coefficient for values in the input arrays x and y \n",
    "    x, y: - array-like (list or np array) of equal length\n",
    "    '''\n",
    "    # ensure that input sequences have equal length\n",
    "    assert(np.shape(x) == np.shape(y))\n",
    "    # compute means\n",
    "    mx, my = np.mean(x), np.mean(y)\n",
    "    # compute and return the correlation coefficient\n",
    "    return np.sum((x-mx)*(y-my)) / (np.sum((x-mx)**2)*np.sum((y-my)**2))**0.5\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df632b51",
   "metadata": {},
   "source": [
    "The code below generates a sequence of uniformly distributed random numbers and then applies a nonlinear transformation to them using $\\ln$ function and adds some random \"noise\" to construct a sequence of random numbers $y$ correlated with $x$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f4995e61",
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_xy(xmin=0., xmax=1., nr=10000):\n",
    "    '''generate 2 sequences of correlated random numbers\n",
    "       x and y of size nr'''\n",
    "    x = np.random.uniform(xmin, xmax, size=nr)\n",
    "    # construct a second sample correlated with the first one\n",
    "    y = np.log(x) + np.random.normal(0., 0.1, size=nr)\n",
    "    return x, y "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dda2ab2f",
   "metadata": {},
   "source": [
    "The distribution of the transformed numbers $y$ is not uniform and does not have a symmetric distribution like the Gaussian pdf (it is very different from Gaussian). The second plot shows that $x$ and $y$ are strongly correlated. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2c78034c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the correlation coefficient = 0.86047\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 450x450 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 450x450 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nr = 10000\n",
    "x, y = generate_xy(nr=nr)\n",
    "r = rcorr(x, y)\n",
    "print(f'the correlation coefficient = {r:.5f}')\n",
    "\n",
    "plot_pdf(y, plot_pdf=False, xlims=[-5, 1], ylims=[1.e-2,5], \n",
    "         bins='auto', xlabel=r'$y$', ylabel=r'$p(y)$', figsize=3)\n",
    "\n",
    "plot_xy(x, y, xlab='$x$',  ylab='$y$', xlim=[x.min(), 0.5], ylim=[y.min(), y.max()], figsize=(3,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4f4d3d7",
   "metadata": {},
   "source": [
    "If we generate <tt>n</tt> such sample pairs and compute correlation coefficient for each of them and record it in an array, we can then compute the mean and standard deviation (uncertainty) of the correlation coefficient for samples of the size <tt>nr</tt>. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7e774ea6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the mean rcorr = 0.86200; st.dev. = 0.00441\n"
     ]
    }
   ],
   "source": [
    "n = 1000\n",
    "rc = np.empty(n)\n",
    "for i in range(n):\n",
    "    # generate 2 sample sequences\n",
    "    x, y = generate_xy(nr=nr)\n",
    "    # compute correlation coefficient and record it\n",
    "    rc[i] = rcorr(x, y)\n",
    "\n",
    "# compute the mean and standard deviation of the correlation coefficients\n",
    "rcmean, rcstd = np.mean(rc), np.std(rc, ddof=1)\n",
    "\n",
    "print(f'the mean rcorr = {rcmean:.5f}; st.dev. = {rcstd:.5f}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f69134a",
   "metadata": {},
   "source": [
    "Despite the fact that distribution of $x$ and $y$ is ***not*** Gaussian, the histogram of computed $r$ values below shows that their distribution is close to the Gaussian with the mean and standard deviations given by the values of these computed for samples above. This is a consequence of the Central Limit Theorem and is the basis of the common assumption in experimental measurements that average over a number of measurements can be viewed as a random number drawn from a Gaussian pdf with $\\sigma$ given by the measurement uncertainty. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fdf4dfeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 450x450 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_pdf(rc, plot_pdf=True, func=gaussian_pdf, args=[rcmean, rcstd], \n",
    "         ylog=False, xlims=[rcmean-4*rcstd, rcmean+4*rcstd], ylims=[1.e-2,100], \n",
    "         label='rcorr values', pdf_label='Gaussian pdf',\n",
    "         bins='auto', xlabel=r'$r$', ylabel=r'$p(r)$', figsize=3)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f548c8b0",
   "metadata": {},
   "source": [
    "In practice, however, we usually just have one sample of data for which can compute a quantity, such as correlation coefficient. We still would like to estimate its uncertainty. This is what bootstrap method is for. In the exercise below you should use this method to estimate the uncertainty of $r$ from a single generated sample. \n",
    "\n",
    "\n",
    "***Note:*** Description of the bootstrap resampling method can be found in [Section 7.3](https://astro.uchicago.edu/~andrey/classes/a211w25/html/mc/mc_bs.html) of the notes. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb0e848c",
   "metadata": {},
   "source": [
    "**Task 1a (3 points).** Write a function (suggested header is below), which generates a bootstrap pair of sequences $x$ and $y$ from the original input sequences. \n",
    "\n",
    "    def bootstrap_samples_xy(x, y, ns = 1):\n",
    "        '''\n",
    "        Generate ns bootstrap samples from pairs of sequences x and y \n",
    "        x, y: array-like (lists, tuples, or numpy arrays)\n",
    "        ns:   int, the number of bootstrap samples to generate\n",
    "        '''\n",
    "        Your code here to fill out bootstrap arrays of xbs, ybs\n",
    "        \n",
    "        return xbs, ybs\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c2a2a24",
   "metadata": {},
   "source": [
    "**Task 1b (1 point).** Write code to generate <tt>nbs</tt> bootstrap samples</tt> from the original sequences $x$ and $y$. Compute correlation coefficient for each bootstrap sample and record it in an array.\n",
    "\n",
    "**Task 1c (1 points).**  Compute the mean correlation coefficient $\\bar{r}$ and its standard deviation $\\sigma_r$ over all bootstrap samples. Plot the histogram of $r$ values for the bootstrap samples and compare it to the Gaussian pdf with the mean $\\bar{r}$ and its standard deviation $\\sigma_r$. \n",
    "\n",
    "**Task 1d (1 point).** Compare results to the results for independently generated random sample pairs shown in the background above. What can you can conclude about the validity and applicability of the bootstrap method for estimating uncertainty of a quantity computed from a sample of data values. \n",
    "\n",
    "**Task 1e (2 extra-credit points).** Write code to estimate how many bootstrap samples need to be generated for the 10000 data values in $x$ and $y$ generated above in order for absolute uncertainty in $\\sigma_r$ to be less than 0.0001. Use your code to determine the required number of bootstrap samples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "310cfe19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.00219188 0.28959627 0.24695192 ... 0.11996951 0.8899228  0.34416162]\n",
      " [0.65627607 0.75204798 0.57944593 ... 0.44233708 0.34695289 0.56859471]\n",
      " [0.26194865 0.15459358 0.44097603 ... 0.64497708 0.61554464 0.05495881]\n",
      " ...\n",
      " [0.95247313 0.18945935 0.4299506  ... 0.43152542 0.69385379 0.84300677]\n",
      " [0.332728   0.30586473 0.41745571 ... 0.42647701 0.23304036 0.49255338]\n",
      " [0.80892479 0.02871184 0.60133403 ... 0.88336828 0.29021104 0.57296433]]\n",
      "0.8665589067792534 0.004420586892502927\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 960x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#disclaimer: this cell takes a little bit of time to run\n",
    "import random\n",
    "def bootstrap_samples_xy(x, y, ns =1): \n",
    "    xbs = np.zeros(shape = (ns, len(x)))\n",
    "    ybs = np.zeros(shape = (ns, len(y)))\n",
    "    for j in range(0, len(x)):\n",
    "        index = np.random.randint(0, len(x), ns)\n",
    "        xbs[:,j] = x[index]\n",
    "        ybs[:,j] = y[index]\n",
    "    return xbs, ybs\n",
    "\n",
    "ns = 2000\n",
    "xbs, ybs = bootstrap_samples_xy(x, y , ns = ns)\n",
    "print(xbs)\n",
    "r_corrs = np.zeros(ns)\n",
    "for i in range(0, ns):\n",
    "    X, Y = xbs[i], ybs[i]\n",
    "    r_corrs[i] += rcorr(X, Y)\n",
    "\n",
    "\n",
    "mean = np.mean(r_corrs)\n",
    "std = np.std(r_corrs)\n",
    "\n",
    "x1 = np.arange(0, 1000)\n",
    "x1 = x1/1000\n",
    " \n",
    "pdf = gaussian_pdf(x1, mean, std)\n",
    "plt.plot(x1, pdf)\n",
    "plt.hist(r_corrs, density = 'True', bins = \"auto\")\n",
    "plt.xlim(.8, .9)\n",
    "\n",
    "print(mean, std)\n",
    "#the mean and standard deviation values are pretty close to those in the above plot\n",
    "#thus bootstrap clearly is a method that is applicable \n",
    "#as it produces very reasonable results, and that is for only 2000 samples. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f393c216",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the number of samples it took to stabilize to a absolute difference of .00001 was 2500 bootstrap samples.\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 960x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#EXTRA CREDIT\n",
    "#note: this cell can take a little while (1-2 mins to run)\n",
    "#in this case i am taking absolute uncertainty to mean standard deviation. \n",
    "#also, sometime by chance from the early std values, it stabalizes really quickly\n",
    "#as occasionally, the standard deviation of the early measurements happens to be really small. \n",
    "i = 20\n",
    "std_now = 100\n",
    "std_last = 10\n",
    "stds = []\n",
    "x_samples = np.zeros(shape = (10000, 10000))\n",
    "y_samples = np.zeros(shape = (10000, 10000))\n",
    "uncertainty = 1\n",
    "x_test, y_test = generate_xy(nr=10000)\n",
    "while uncertainty > .0001:\n",
    "    xbs1, ybs1 = bootstrap_samples_xy(x_test, y_test, ns = 20)\n",
    "    x_samples[(i-20):i] = xbs1\n",
    "    y_samples[(i-20):i] = ybs1\n",
    "    array_x = x_samples[0:i]\n",
    "    array_y = y_samples[0:i]\n",
    "    if i > 1:\n",
    "        r_corrs = np.zeros(i)\n",
    "        for j in range(0, i):\n",
    "            xl, yl = array_x[j], array_y[j]\n",
    "            r_corrs[j] += rcorr(xl, yl)\n",
    "        std1 = np.std(r_corrs)\n",
    "        stds.append(std1)\n",
    "        if i > 100: #prevents cases where the samples randomly have a low error to start with \n",
    "            uncertainty = np.std(stds)\n",
    "    i+=20\n",
    "\n",
    "plt.plot(stds)\n",
    "print(f'the number of samples it took to stabilize to a absolute difference of .00001 was {i} bootstrap samples.')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e811c78",
   "metadata": {},
   "source": [
    "## <font color='blue'>Exercise 2: implementing and testing  Differential Evolution algorithm for minimization (18 points)</font>\n",
    "\n",
    "**Background.** Minimization in many dimensions is generally a complicated task. However, a class of <a href=\"https://en.wikipedia.org/wiki/Differential_evolution\">Differential Evolution</a> (DE) algorithms developed from the initial ideas of R. Storn and K. Price in 1997 (<a href=\"https://link.springer.com/article/10.1023%2FA%3A1008202821328\">Storn & Price 1997</a>), are relatively simple to implement, work in arbitrary number of dimensions, do not require function derivatives, allow imposing bounds on the domain, and are quite efficient in minimizing multi-dimensional functions.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ac70894",
   "metadata": {},
   "source": [
    "The simplest version of the differential evolution algorithm described in [Section 7.4 of the notes](https://astro.uchicago.edu/~andrey/classes/a211w25/html/mc/mc_opt.html) can be presented as the following pseudo-code below. Here npop is the number of population members and x0 is an array of shape (npop, ndim) with initial location of the population members; ndim is the number of variables in the function <tt>func</tt> for which we need to find the values of arguments corresponding to the function minimum.   \n",
    "\n",
    "    npop = np.size(x0)[0] # the number of population members\n",
    "    xnow = np.copy(x0)\n",
    "    fnow = np.empty(npop)\n",
    "    for i in range(npop):\n",
    "        fnow[i] = func(xnow[i])\n",
    "    xnext = np.zeros_like(xnow)\n",
    "    ....\n",
    "    while some convergence criterion is not met: \n",
    "        # xnow is a vector of coordinate vectors of the current population\n",
    "        # xnext is a vector of coordinate vector of the next gen population\n",
    "        for i in range(npop):\n",
    "            # generate random unique indices  ir1, ir2, ir3 \n",
    "            # where all indices are not equal to each other and not equal to i\n",
    "            # s can be a constant for large npop, but it's more safe to make it a\n",
    "            # random number drawn from uniform distribution in the range [smin,1]\n",
    "            xtry = xnow[ir3] + s * (xnow[ir1] - xnow[ir2])\n",
    "            if (func(xtry) <= fnow[i]) and (xtry is within bounds):\n",
    "                xnext[i] = xtry\n",
    "                fnow[i] = func(xtry)\n",
    "            else:\n",
    "                xnext[i] = xnow[i]\n",
    "                \n",
    "        xnow = np.copy(xnext)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "657b2c7d",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3b8403c",
   "metadata": {},
   "source": [
    "**Task 2a. (14 points)** Use pseudo-code of the DE algorithm above to implement the basic DE minimization function with the following interface:\n",
    "\n",
    "    def minimize_de(func, x0, *args, atol=1.e-6, s=0.1, bounds=None):\n",
    "        \"\"\"\n",
    "        Parameters:\n",
    "        ------------\n",
    "        func - Python function object\n",
    "               function to minimize, should expect x0 as a parameter vector\n",
    "        x0   - vector of real numbers of shape (npop, nd), \n",
    "                where npop is population size and nd is the number of func parameters\n",
    "        args - tuple of floats, arguments to be passed to func\n",
    "        atol - float\n",
    "                absolute tolerance threshold for change of population member positions\n",
    "        s    - float \n",
    "               s parameter for scaling steps, the step size will be dwarf from uniform distribution between s and 1\n",
    "        bounds - array of tuples \n",
    "                bounds for the minimization exploration; define the region in which to search for the minimum\n",
    "        \"\"\"\n",
    "               \n",
    "Your function should be able to prevent steps and function evaluations outside the range of values for each argument of function `func` specified in the tuple `bounds` and should be able to find the values of the minimum with absolute accuracy better than input `atol` (at least for `atol > 1e-8`). \n",
    "\n",
    "***Note:*** guard against for the cases when the small number of population members is used when population does not move at a given mutation stage, so that this does not result in premature stopping of the algorithm. \n",
    "\n",
    "***Note:*** Try to remove the inner loops as much of the algorithm as possible. This code can be fully vectorized with only one loop for the mutations of the population. However, unless you are very comfortable with NumPy, try to implement a working version with loops first before trying to remove loops and speed up calculations in this function (which can be done after you are done with all of the exercises in this assignment). \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da8ac225",
   "metadata": {},
   "source": [
    "***Note:*** Assuming that we are searching for a minimum within some rectangular domain defined by the minimum and maximum values along each coordinate axis: $\\mathbf{x}_{\\rm min}$ and $\\mathbf{x}_{\\rm max}$, we can initialize the population members as \n",
    "\n",
    "$$\\mathbf{x}_0 = \\mathbf{x}_{\\rm min} + (\\mathbf{x}_{\\rm max}-\\mathbf{x}_{\\rm min}) \\cdot\\mathrm{rand}(0,1),$$\n",
    "\n",
    "where $\\mathrm{rand}(0,1)$ is a random number uniformly distributed from 0 to 1, generated using <tt>np.random.uniform</tt>.  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86c5e7b9",
   "metadata": {},
   "source": [
    "***2b (4 points).*** Test your implementation using Rosenbrock function implemented below in 2- and 5-dimensions. Try different number of population members and $s$ values and choices for how $s$ is chosen and examine how results change and for what number of population members the algorithm returns correct minimum value reliably ($[1,1]$ in 2D and $[1, 1, 1, 1, 1]$ in 5D). \n",
    "\n",
    "\n",
    "* Present a brief discussion of how large population should be in 2D and 5D to get correct minimum reliably. \n",
    "\n",
    "\n",
    "* Experiment with different values of the $s$ parameter and present a brief discussion of how choices of $s$ affect results \n",
    "\n",
    "\n",
    "* Demonstrate that your function returns values within the specified `atol` value reliably in 5D. \n",
    "\n",
    "\n",
    "* Compare the time it takes your function to find the minimum and how well it can find the minimum using 30 and $\\geq 60$ population members. Compare your results with the SciPy's `differential_evolution` function (example of how to use it is shown below). "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0346f3e",
   "metadata": {},
   "source": [
    "The two versions of the Rosenbrock. The first one simply takes as input array $x$ of length equal to the number of function arguments (the number of dimensions <tt>ndim</tt> of argument space). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7c42a104",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rosenbrock(x):\n",
    "    \"\"\"The Rosenbrock \"banana\" function\n",
    "    x is a vector of points in 2 or more dimensional space\n",
    "    In this function x is an array of shape (ndim) containing \n",
    "    values of ndim function arguments. \n",
    "    \n",
    "    Returns: \n",
    "        float, value of the ndim-dimensional Rosenbrock function for input x\n",
    "    \"\"\"\n",
    "    return sum(100.0*(x[1:]-x[:-1]**2.0)**2.0 + (1-x[:-1])**2.0)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54923763",
   "metadata": {},
   "source": [
    "The Rosenbrock function below is modified to handle vector input of the shape (ndim, npop) if you decide to do the numpy optimization to remove loops."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dc3447ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rosenbrock_v(x):\n",
    "    \"\"\"Compute the Rosenbrock \"banana\" function\n",
    "    In this function the input x is expected to have shape (ndim, npop) and contain \n",
    "    values of ndim arguments of the function for npop population members.\n",
    "    This shape allows to arrange calculations in the DE algorithm that avoid inner loops\n",
    "    \n",
    "    Returns:\n",
    "        array of shape (npop) with values of the Rosenbrock function for the \n",
    "        locations of each population member\n",
    "    \"\"\"\n",
    "    return np.sum(100.0*(x[1:]-x[:-1]**2.0)**2.0 + (1-x[:-1])**2.0, axis=0).T\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92f7ad1e",
   "metadata": {},
   "source": [
    "Code below is an example of how SciPy's [`differential_evolution`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html) function can be used to estimate the minimum of the 5-D Rosenbrock function and how one can time the time it takes for that function to find the minimum. \n",
    "\n",
    "`mutation` argument of `differential_evolution` determines the range from which random scaling parameter will be \n",
    "drawn from the uniform distribution defined on the interval $[s,1]$. `recombination` argument determines the recombination probability `cr` in the crossover stage of the algorithm; `recombination=1.` corresponds to no crossover stage. Description of other parameters can be found in the description of the function at the link above. Keep `polish=False` in comparisons with your function because in this case the SciPy function does a pure DE minimzation. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c03456d",
   "metadata": {},
   "source": [
    "Without crossover stage (results are unstable, but can be made stable by increasing npop to >=10):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2cbc081a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "completed in 0.224 sec\n",
      "found minimum at: [0.85734224 0.73364159 0.52464518 0.27027871 0.04948696]\n",
      "in 5790 function evaluations\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "from time import time\n",
    "\n",
    "from scipy.optimize import differential_evolution\n",
    "# the total number of pop members will be popsize*5\n",
    "popsize = 6\n",
    "\n",
    "bounds = np.array([(-15, 15), (-10, 10), (-9,9), \n",
    "                   (-8, 8), (-9.5, 9.5)])\n",
    "\n",
    "s = 0.2\n",
    "tstart = time()\n",
    "res = differential_evolution(rosenbrock, bounds=bounds, mutation=[s, 1.], recombination=1., \n",
    "                               atol=1.e-8, tol=0., strategy='rand1bin',\n",
    "                               popsize=popsize, polish=False)\n",
    "print(f\"completed in {(time() - tstart):.3g} sec\")\n",
    "print(\"found minimum at:\", res.x)\n",
    "print(f\"in {res.nfev:d} function evaluations\")\n",
    "print(40*'-')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea001edd",
   "metadata": {},
   "source": [
    "With crossover stage (results are stable even with npop=5):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5d063064",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "completed in 1.13 sec\n",
      "found minimum at: [0.99996204 0.99992985 0.99985697 0.99973426 0.99945014]\n",
      "in 30030 function evaluations\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "from scipy.optimize import differential_evolution\n",
    "\n",
    "# the total number of pop members will be popsize*5\n",
    "popsize = 6\n",
    "\n",
    "bounds = np.array([(-15, 15), (-10, 10), (-9,9), \n",
    "                   (-8, 8), (-9.5, 9.5)])\n",
    "\n",
    "s = 0.2\n",
    "tstart = time()\n",
    "res = differential_evolution(rosenbrock, bounds=bounds, mutation=[s, 1.], recombination=0.5, \n",
    "                               atol=1.e-8, tol=0., strategy='rand1bin',\n",
    "                               popsize=popsize, polish=False)\n",
    "print(f\"completed in {(time() - tstart):.3g} sec\")\n",
    "print(\"found minimum at:\", res.x)\n",
    "print(f\"in {res.nfev:d} function evaluations\")\n",
    "print(40*'-')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bf8820df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.99999969 0.99999936]\n",
      " [0.99999937 0.99999873]\n",
      " [0.99999939 0.99999882]\n",
      " [1.00000032 1.00000066]\n",
      " [0.99999957 0.99999911]\n",
      " [1.00000005 1.00000015]\n",
      " [0.99999925 0.99999851]\n",
      " [0.99999996 0.99999996]\n",
      " [1.00000041 1.00000084]\n",
      " [0.99999966 0.99999937]]\n",
      "[[1.00000006 1.00000011 1.00000027 1.00000055 1.00000103]\n",
      " [1.00000005 1.00000005 1.00000006 1.00000006 1.00000012]\n",
      " [0.99999996 0.99999993 0.9999999  0.9999998  0.99999964]\n",
      " [1.00000004 1.00000002 1.00000001 0.99999999 0.99999992]\n",
      " [1.00000001 1.00000001 1.         1.00000008 1.00000009]\n",
      " [1.00000004 1.00000011 1.00000017 1.0000003  1.00000059]\n",
      " [0.99999997 0.99999995 0.99999995 0.99999992 0.99999982]\n",
      " [0.99999996 0.99999994 0.99999992 0.99999977 0.99999952]\n",
      " [1.00000008 1.00000008 1.00000016 1.0000003  1.00000051]\n",
      " [0.99999994 0.99999994 0.99999989 0.99999976 0.99999944]\n",
      " [0.99999996 0.99999993 0.99999986 0.99999972 0.99999951]\n",
      " [1.0000001  1.00000021 1.0000004  1.00000078 1.00000163]\n",
      " [0.99999997 0.99999995 0.99999994 0.99999993 0.99999996]\n",
      " [0.99999994 0.9999999  0.99999981 0.99999965 0.99999932]\n",
      " [0.99999997 0.99999993 0.99999992 0.99999984 0.99999973]\n",
      " [0.99999989 0.99999977 0.99999959 0.99999928 0.99999857]\n",
      " [1.         0.99999994 0.99999992 0.9999999  0.99999977]\n",
      " [0.99999996 0.99999997 0.99999992 0.99999989 0.99999981]\n",
      " [1.00000008 1.00000011 1.00000017 1.00000027 1.00000049]\n",
      " [1.         1.00000009 1.00000005 1.00000011 1.00000033]\n",
      " [0.99999993 0.99999988 0.99999976 0.99999951 0.99999891]\n",
      " [0.99999994 0.99999989 0.9999998  0.99999963 0.99999928]\n",
      " [0.99999994 0.99999993 0.99999987 0.9999998  0.99999958]\n",
      " [0.99999995 0.99999999 0.99999995 0.99999998 0.99999997]\n",
      " [0.99999994 0.99999991 0.99999981 0.99999958 0.99999911]\n",
      " [1.00000001 1.00000002 1.00000006 1.00000019 1.00000039]\n",
      " [0.99999997 1.00000001 1.00000007 1.00000024 1.0000005 ]\n",
      " [1.         1.00000003 1.00000004 1.00000003 1.00000015]\n",
      " [1.00000011 1.00000014 1.00000026 1.00000046 1.0000009 ]\n",
      " [1.00000004 1.00000006 1.00000017 1.00000035 1.00000072]]\n"
     ]
    }
   ],
   "source": [
    "def bounds_check(x, bounds):\n",
    "    b = 0 \n",
    "    if bounds is not None: \n",
    "        for i in range(len(x)):\n",
    "            if bounds[i, 0] <= x[i] <= bounds[i, 1]:\n",
    "                b+=0 \n",
    "            else: \n",
    "                b += 1\n",
    "    return b\n",
    "\n",
    "def minimize_de(func, x0, *args, atol = 1e-6, s = .9, bounds = None):\n",
    "    npop = np.shape(x0)[0]\n",
    "    xnow = np.copy(x0)\n",
    "    fnow = np.empty(npop)\n",
    "    for i in range(npop):\n",
    "        fnow[i]=func(xnow[i])\n",
    "    xnext = np.zeros_like(xnow)\n",
    "    max_diff = 1000\n",
    "    stop = False\n",
    "    while (atol < max_diff or stop == False):\n",
    "        x_maxList = np.zeros(npop)\n",
    "        for i in range(npop):\n",
    "            ir1 = np.random.randint(0, npop)\n",
    "            ir2 = np.random.randint(0, npop)\n",
    "            while ir2 == ir1: \n",
    "                ir2 = np.random.randint(0, npop)\n",
    "            ir3 = np.random.randint(0, npop)\n",
    "            while (ir3 == ir1) or (ir3 == ir2):\n",
    "                ir3 = np.random.randint(0, npop)\n",
    "            xtry = xnow[ir3]+ s*(xnow[ir1] - xnow[ir2])\n",
    "            b = 0 \n",
    "            b = bounds_check(xtry, bounds)\n",
    "            if b == 0: \n",
    "                if (func(xtry) <= fnow[i]):\n",
    "                    xnext[i] = xtry\n",
    "                    fnow[i] = func(xtry)\n",
    "                else: \n",
    "                    xnext[i] = xnow[i]\n",
    "            else: \n",
    "                xnext[i] = xnow[i]\n",
    "            x_maxList[i]+= np.max(np.abs(xnext[i]-xnow[i]))\n",
    "        max_diff = np.max(x_maxList)\n",
    "        xnow = np.copy(xnext)\n",
    "        if max_diff == 0: \n",
    "            '''this condition stops the function from shutting down\n",
    "            when all proposed steps fail, as the only way max_diff is exactly\n",
    "            0 is if all none of the members move at all. This could happen \n",
    "            even far away from the minimum just by chance, so we want to \n",
    "            account for this possibility in our stopping condition.'''\n",
    "            stop = False\n",
    "        else: \n",
    "            stop = True\n",
    "    return xnext\n",
    "\n",
    "xmin = -5\n",
    "xmax = 5\n",
    "ymin = -5\n",
    "ymax = 5\n",
    "npop = 10\n",
    "x0 = np.zeros(shape = (npop,2))\n",
    "for i in range(0, npop):\n",
    "    x0[i, 0] += xmin + (xmax-xmin) * np.random.uniform(0,1)\n",
    "    x0[i, 1] += ymin + (ymax-ymin) * np.random.uniform(0,1)\n",
    "  \n",
    "print(minimize_de(rosenbrock, x0, atol = 1e-6, s=.9, bounds = None))\n",
    "            \n",
    "#now for the 5d case\n",
    "\n",
    "minf = -5\n",
    "maxf = 5 \n",
    "npop = 30\n",
    "x1 = np.zeros(shape = (npop, 5))\n",
    "#keep all 5 bounds for the coordinates the same, just to keep it simple. \n",
    "\n",
    "for i in range(0, npop):\n",
    "    x1[i, 0] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x1[i, 1] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x1[i, 2] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x1[i, 3] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x1[i, 4] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    \n",
    " \n",
    "print(minimize_de(rosenbrock, x1, atol = 1e-6, s=.9, bounds = None))\n",
    "\n",
    "\n",
    "#QUESTION 2B\n",
    "\n",
    "#for number of population members: \n",
    "\n",
    "#needed around 10 population members for 2d, and 25-30 for stable results in 5d \n",
    "#this matches the 5-10 additional members per dimension\n",
    "#which matches the requirements laid out in the reading\n",
    "#they would work SOMETIMES for smaller population numbers\n",
    "#but the results were much more sporadic. \n",
    "\n",
    "#for size of the parameter s\n",
    "\n",
    "# a larger value for the parameter s generally worked better, with around \n",
    "#.9 being the most stable at least in my tests (i tested from .1-1)\n",
    "#This does make a little bit of sense, as a larger parameter value \n",
    "#means that the step is using more info from the other members \n",
    "#which theoretically could mean better convergence potentially? \n",
    "\n",
    "#finally, are the results within the atol threshold? \n",
    "\n",
    "#Yes!\n",
    "#these results are also consistently within the atol threshold\n",
    "#in both the 2D and 5D cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8719bbb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.99999994 0.99999986 0.99999972 0.99999942 0.99999885]\n",
      " [0.99999992 0.99999983 0.99999968 0.9999994  0.99999889]\n",
      " [0.99999993 0.99999987 0.99999971 0.9999994  0.99999879]\n",
      " [0.99999989 0.99999975 0.99999947 0.99999899 0.99999809]\n",
      " [0.99999982 0.99999971 0.99999935 0.99999875 0.9999976 ]\n",
      " [0.9999999  0.99999975 0.99999941 0.99999888 0.99999781]\n",
      " [0.99999992 0.99999987 0.99999982 0.99999961 0.99999918]\n",
      " [0.99999993 0.99999986 0.99999972 0.99999942 0.99999888]\n",
      " [0.99999988 0.99999981 0.99999963 0.99999935 0.99999876]\n",
      " [1.00000004 1.00000001 0.99999996 0.99999982 0.99999962]\n",
      " [0.99999994 0.99999995 0.99999995 0.99999997 0.99999991]\n",
      " [0.99999999 0.99999989 0.99999972 0.9999994  0.99999885]\n",
      " [0.99999995 0.99999991 0.9999997  0.99999927 0.99999844]\n",
      " [0.99999984 0.99999966 0.99999934 0.99999858 0.99999711]\n",
      " [0.99999998 1.00000001 0.99999996 0.99999979 0.99999967]\n",
      " [0.99999999 1.         0.99999998 0.99999985 0.99999971]\n",
      " [0.99999998 0.99999989 0.99999977 0.99999946 0.99999896]\n",
      " [0.99999987 0.99999978 0.99999955 0.99999901 0.99999806]\n",
      " [0.99999994 0.99999995 0.9999998  0.99999954 0.99999915]\n",
      " [0.99999985 0.9999998  0.99999964 0.9999992  0.99999841]\n",
      " [1.00000001 0.99999991 0.99999969 0.99999933 0.99999866]\n",
      " [0.9999999  0.9999998  0.99999956 0.99999909 0.99999819]\n",
      " [0.99999992 0.99999976 0.99999948 0.99999895 0.999998  ]\n",
      " [1.00000003 1.00000004 1.00000002 1.00000001 1.00000004]\n",
      " [0.99999988 0.99999981 0.99999963 0.99999935 0.99999876]\n",
      " [0.99999994 0.99999987 0.99999974 0.99999945 0.99999894]\n",
      " [1.00000005 1.00000004 1.00000004 0.99999997 0.99999992]\n",
      " [1.         1.00000003 0.99999996 0.99999981 0.99999958]\n",
      " [0.99999987 0.99999982 0.99999975 0.9999995  0.99999905]\n",
      " [1.00000004 1.00000013 1.00000027 1.00000049 1.00000111]]\n",
      "completed in 0.32 sec\n"
     ]
    }
   ],
   "source": [
    "#last step: checking the times for different amounts of population members\n",
    "tstart = time()\n",
    "minf = -5\n",
    "maxf = 5 \n",
    "npop = 30\n",
    "x_30 = np.zeros(shape = (npop, 5))\n",
    "#keep all 5 bounds for the coordinates the same, just to keep it simple. \n",
    "\n",
    "for i in range(0, npop):\n",
    "    x_30[i, 0] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x_30[i, 1] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x_30[i, 2] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x_30[i, 3] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x_30[i, 4] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    \n",
    " \n",
    "print(minimize_de(rosenbrock, x_30, atol = 1e-6, s=.9, bounds = None))\n",
    "print(f\"completed in {(time() - tstart):.3g} sec\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dfb89208",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.99999996 0.99999996 0.99999989 0.99999977 0.99999952]\n",
      " [0.99999998 0.99999997 0.99999989 0.99999978 0.99999953]\n",
      " [1.         1.00000003 1.00000011 1.00000024 1.0000005 ]\n",
      " [1.         0.99999998 0.99999999 0.99999997 0.99999996]\n",
      " [1.00000003 1.00000007 1.00000017 1.00000038 1.00000075]\n",
      " [1.00000005 1.00000011 1.00000018 1.00000041 1.00000084]\n",
      " [1.00000001 1.00000004 1.00000008 1.00000023 1.00000047]\n",
      " [1.00000004 1.00000009 1.00000014 1.00000027 1.00000051]\n",
      " [1.00000003 1.00000006 1.00000011 1.00000024 1.00000052]\n",
      " [1.00000005 1.00000008 1.00000014 1.00000026 1.00000051]\n",
      " [1.00000001 1.00000003 1.00000008 1.00000014 1.00000029]\n",
      " [1.         0.99999997 0.99999991 0.99999979 0.9999996 ]\n",
      " [1.         0.99999995 0.9999999  0.99999978 0.99999956]\n",
      " [1.00000001 1.00000001 0.99999999 0.99999999 0.99999992]\n",
      " [0.99999996 0.99999995 0.99999998 0.99999997 0.99999996]\n",
      " [0.99999998 0.99999997 0.99999995 0.99999994 0.99999992]\n",
      " [1.00000008 1.00000014 1.00000027 1.00000053 1.00000107]\n",
      " [1.00000004 1.0000001  1.00000024 1.0000004  1.00000079]\n",
      " [1.         1.00000001 1.00000004 1.00000011 1.00000019]\n",
      " [1.00000002 1.00000004 1.00000001 1.00000004 1.00000009]\n",
      " [0.99999998 0.99999998 1.00000001 1.00000005 1.00000016]\n",
      " [0.99999994 0.99999985 0.99999971 0.99999945 0.99999889]\n",
      " [0.99999998 0.99999999 0.99999997 0.99999995 0.99999993]\n",
      " [1.00000002 1.0000001  1.00000018 1.00000037 1.00000077]\n",
      " [1.00000003 1.00000007 1.00000015 1.00000035 1.00000073]\n",
      " [1.00000002 1.         0.99999997 0.99999993 0.99999981]\n",
      " [1.00000003 1.00000005 1.00000008 1.0000001  1.00000023]\n",
      " [1.         1.00000001 1.00000001 0.99999999 1.        ]\n",
      " [1.         0.99999999 0.99999998 0.99999998 0.99999996]\n",
      " [0.99999999 1.         0.99999998 0.99999992 0.99999987]\n",
      " [0.99999997 0.99999995 0.99999989 0.99999979 0.99999959]\n",
      " [1.00000006 1.00000009 1.0000002  1.00000034 1.00000065]\n",
      " [0.99999998 1.         0.99999992 0.99999984 0.99999966]\n",
      " [0.99999997 0.99999995 0.99999988 0.99999978 0.99999959]\n",
      " [1.00000004 1.00000009 1.00000014 1.00000028 1.00000056]\n",
      " [1.00000006 1.00000009 1.00000022 1.00000045 1.00000085]\n",
      " [0.99999996 0.99999993 0.99999989 0.99999984 0.99999971]\n",
      " [1.         0.99999998 0.99999998 0.99999997 0.99999996]\n",
      " [1.00000001 1.00000004 1.0000001  1.00000021 1.00000043]\n",
      " [1.00000003 1.00000001 0.99999999 1.00000003 1.00000008]\n",
      " [1.00000007 1.00000013 1.00000023 1.00000046 1.00000095]\n",
      " [1.00000001 1.00000005 1.00000009 1.00000016 1.00000034]\n",
      " [0.99999995 0.99999988 0.99999979 0.9999996  0.99999921]\n",
      " [0.99999998 0.99999996 0.9999999  0.99999981 0.99999961]\n",
      " [0.99999995 0.99999989 0.99999978 0.99999955 0.99999909]\n",
      " [1.00000006 1.00000012 1.00000024 1.0000005  1.00000103]\n",
      " [0.99999993 0.99999987 0.99999971 0.99999943 0.99999886]\n",
      " [1.00000006 1.00000008 1.00000013 1.00000026 1.00000053]\n",
      " [0.99999992 0.99999986 0.99999967 0.99999935 0.99999869]\n",
      " [1.00000002 1.00000003 1.00000004 1.0000001  1.00000021]\n",
      " [0.99999997 0.99999994 0.99999989 0.99999983 0.99999962]\n",
      " [1.00000004 1.00000007 1.00000017 1.00000029 1.00000053]\n",
      " [1.         1.00000001 1.00000004 1.00000007 1.00000019]\n",
      " [1.         1.00000002 1.00000005 1.00000016 1.00000032]\n",
      " [1.00000001 1.00000001 0.99999998 0.99999999 0.99999994]\n",
      " [0.99999992 0.99999989 0.9999998  0.99999964 0.99999929]\n",
      " [0.99999998 0.99999993 0.99999981 0.99999962 0.99999923]\n",
      " [1.00000008 1.00000012 1.0000002  1.00000044 1.00000089]\n",
      " [1.00000003 1.00000005 1.00000009 1.00000014 1.00000025]\n",
      " [1.00000003 1.00000004 1.00000007 1.0000001  1.00000018]]\n",
      "completed in 0.664 sec\n"
     ]
    }
   ],
   "source": [
    "#now for the case of 60 population members:\n",
    "tstart = time()\n",
    "minf = -5\n",
    "maxf = 5 \n",
    "npop = 60\n",
    "x_60 = np.zeros(shape = (npop, 5))\n",
    "#keep all 5 bounds for the coordinates the same, just to keep it simple. \n",
    "\n",
    "for i in range(0, npop):\n",
    "    x_60[i, 0] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x_60[i, 1] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x_60[i, 2] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x_60[i, 3] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x_60[i, 4] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    \n",
    " \n",
    "print(minimize_de(rosenbrock, x_60, atol = 1e-6, s=.9, bounds = None))\n",
    "print(f\"completed in {(time() - tstart):.3g} sec\")\n",
    "\n",
    "#the time was longer using more population members \n",
    "#which means the ideal amount of population members to use\n",
    "#is enough to find the minimum reliably, but not so many that \n",
    "#it starts to effect how long the program takes to run. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb61d1d4",
   "metadata": {},
   "source": [
    "### <font color='blue'>Exercise 3 (4 points; extra-credit): Implementing the crossover stage of the DE algorithm</font>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab11efa5",
   "metadata": {},
   "source": [
    "**Background**. One of the modifications to the basic DE algorithm is introduction of the ***crossover stage*** after the mutation that constructs the proposed location $\\mathbf{x}^\\prime$.\n",
    "\n",
    "The cross-over stage of the algorithm is described below and can be added after the mutation stage. This stage incorporates information about the current location of the population member into the process of construction of the new proposed location. \n",
    "This way the construction of the proposed location incorporates information about location of 4 population member (the current one and 3 other randomly chosen ones) instead of 3 members as in the basic version without the crossover stage. \n",
    "The crossover stage can stabilize performance of the algorithm and allow stable results to be achieved with fewer population members. \n",
    "\n",
    "The mutation and crossover stages together can be described as follows: \n",
    "\n",
    "* compute mutation vector $\\mathbf{x}^\\prime_i=\\mathbf{x}_{{\\rm now}, r_3} + s\\,(\\mathbf{x}_{{\\rm now}, r_2}-\\mathbf{x}_{{\\rm now}, r_1})$, as before, where vector $\\mathbf{x}^\\prime_i$ has components $\\mathbf{x}^\\prime_i=[x^{\\prime}_{0i}, x^{\\prime}_{1i}, \\ldots, x^{\\prime}_{(D-1)i}]$, and $D$ is the number of parameters of the minimized function (i.e., the number of dimensions in which the algorithm is searching for the minimum). \n",
    "\n",
    "* \"***crossover stage***\": form the trial vector $\\mathbf{x}^{\\prime\\prime}_i=[x^{\\prime\\prime}_{0i}, x^{\\prime\\prime}_{1i}, \\ldots, x^{\\prime\\prime}_{(D-1)i}]$, where \n",
    "\n",
    "\\begin{equation}\n",
    "x^{\\prime\\prime}_{ji} = \n",
    "\\begin{cases}\n",
    "x^{\\prime}_{ji}, \\ {\\rm if\\ }r_j\\leq \\mathrm{cr},\\\\\n",
    "x_{{\\rm now},ji}, \\ {\\rm otherwise\\ }\n",
    "\\end{cases}\n",
    "\\end{equation}\n",
    "\n",
    "and $r_j$ is the random floating point number uniformly distributed in the interval $[0,1]$ that is generated for the index $j$. The crossover parameter $\\mathrm{cr}\\in (0,1]$ is a constant set by user and can be a keyword argument of the DE function. Note that $\\mathrm{cr}\\geq 1$ corresponds to no crossover stage and for $cr=0.$ members will not move from their initial locations. \n",
    "\n",
    "**Task 3a. (3 points)** Implement the crossover stage and test your implementation using the Rosenbrock pdf in 5 dimensions. \n",
    "\n",
    "\n",
    "**Task 3b. (1 points)** Test stability of the DE minimization for 30 population members and 5D Rosenbrock pdf with and without crossover stage. Note that correctly implemented crossover stage should result in shorter time to find the minimum and much improved stability for this test case and number of members.  \n",
    "\n",
    "\n",
    "If you implement the crossover stage it makes sense to add arguments to your DE function that can switch it off and on and change the value of the recombination probability `cr`. For example:\n",
    "\n",
    "    def minimize_de(func, x0, *args, atol=1.e-6, s=0.1, cr=0.7, \n",
    "                    crossover=True, bounds=None):\n",
    "        \"\"\"\n",
    "        Parameters:\n",
    "        ------------\n",
    "        func - Python function object\n",
    "               function to minimize, should expect x0 as a parameter vector\n",
    "        x0   - vector of real numbers of shape (npop, nd), \n",
    "                where npop is population size and nd is the number of func parameters\n",
    "        args - tuple of floats, arguments to be passed to func\n",
    "        atol - float, absolute tolerance threshold for the median change of \n",
    "                population member positions, default is 1.e-6\n",
    "        s    - float, s parameter for scaling steps, the step size will be drawn from \n",
    "               the uniform distribution between s and 1. Default is 0.1 \n",
    "        cr   - float, recombination probability for the crossover stage. \n",
    "               Default is 0.7\n",
    "        crossover - bool, use crossover stage if True. Default is True.\n",
    "        bounds - array of tuples \n",
    "                bounds for the minimization exploration; define the region in which to search for the minimum\n",
    "        \"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7549c302",
   "metadata": {},
   "outputs": [],
   "source": [
    "def minimize_de_crossover(func, x0, *args, atol = 1e-6, s = .9, cr = .7, bounds = None, crossover = True):\n",
    "    npop = np.shape(x0)[0]\n",
    "    xnow = np.copy(x0)\n",
    "    fnow = np.empty(npop)\n",
    "    for i in range(npop):\n",
    "        fnow[i]=func(xnow[i])\n",
    "    xnext = np.zeros_like(xnow)\n",
    "    max_diff = 1000\n",
    "    stop = False\n",
    "    while (atol < max_diff or stop == False):\n",
    "        x_maxList = np.zeros(npop)\n",
    "        for i in range(npop):\n",
    "            ir1 = np.random.randint(0, npop)\n",
    "            ir2 = np.random.randint(0, npop)\n",
    "            while ir2 == ir1: \n",
    "                ir2 = np.random.randint(0, npop)\n",
    "            ir3 = np.random.randint(0, npop)\n",
    "            while (ir3 == ir1) or (ir3 == ir2):\n",
    "                ir3 = np.random.randint(0, npop)\n",
    "            xtry = xnow[ir3]+ s*(xnow[ir1] - xnow[ir2])\n",
    "            xtry2 = xtry.copy()#used to create crosover stage\n",
    "            if crossover == True: \n",
    "                for j in range(len(xtry)):\n",
    "                    r = np.random.uniform(0, 1)\n",
    "                    if r > cr:\n",
    "                        xtry2[j] = xnow[i, j]\n",
    "            b = 0 \n",
    "            b = bounds_check(xtry2, bounds)\n",
    "            if b == 0: \n",
    "                if (func(xtry2) <= fnow[i]):\n",
    "                    xnext[i] = xtry2\n",
    "                    fnow[i] = func(xtry2)\n",
    "                else: \n",
    "                    xnext[i] = xnow[i]\n",
    "            else: \n",
    "                xnext[i] = xnow[i]\n",
    "            x_maxList[i]+= np.max(np.abs(xnext[i]-xnow[i]))\n",
    "        max_diff = np.max(x_maxList)\n",
    "        xnow = np.copy(xnext)\n",
    "        if max_diff == 0:\n",
    "            stop = False\n",
    "        else: \n",
    "            stop = True\n",
    "    return xnext\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0c6ff103",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.99999764 0.99999508]\n",
      " [0.99999873 0.99999723]\n",
      " [0.99999727 0.99999445]\n",
      " [0.99999851 0.99999678]\n",
      " [0.99999776 0.99999521]\n",
      " [1.00000898 1.00001816]\n",
      " [0.99999803 0.99999603]]\n"
     ]
    }
   ],
   "source": [
    "xmin = -5\n",
    "xmax = 5\n",
    "ymin = -5\n",
    "ymax = 5\n",
    "npop = 7\n",
    "x3 = np.zeros(shape = (npop,2))\n",
    "for i in range(0, npop):\n",
    "    x3[i, 0] += xmin + (xmax-xmin) * np.random.uniform(0,1)\n",
    "    x3[i, 1] += ymin + (ymax-ymin) * np.random.uniform(0,1)\n",
    "  \n",
    "print(minimize_de_crossover(rosenbrock, x3, atol = 1e-6, s=.9, cr = .7, bounds = None, crossover = True))\n",
    "\n",
    "#stable for pretty much every run for a population size of 7, unlike normal\n",
    "#thus for this 2d case, the crossover stage is definitely helping. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b0dd0ed2",
   "metadata": {},
   "outputs": [],
   "source": [
    "minf = -5\n",
    "maxf = 5 \n",
    "npop = 30\n",
    "x4 = np.zeros(shape = (npop, 5))\n",
    "#keep all 5 bounds for the coordinates the same, just to keep it simple. \n",
    "\n",
    "for i in range(0, npop):\n",
    "    x4[i, 0] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x4[i, 1] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x4[i, 2] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x4[i, 3] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "    x4[i, 4] += minf + (maxf-minf) * np.random.uniform(0,1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "82c6de76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.00015856 1.00023225 1.00043106 1.00068708 1.00130488]\n",
      " [1.00005237 1.00021835 1.00039985 1.00058511 1.00120817]\n",
      " [1.00001898 1.0001148  1.00026522 1.0004996  1.00085233]\n",
      " [1.00014826 1.00026533 1.00043755 1.00102488 1.00213594]\n",
      " [0.99979082 0.99958747 0.99928404 0.99857606 0.99740103]\n",
      " [1.00010472 1.00014457 1.00020701 1.00022043 1.00043248]\n",
      " [1.00009632 1.00012911 1.00023956 1.0003516  1.00082541]\n",
      " [0.99995865 0.99987614 0.99977799 0.99959319 0.99936555]\n",
      " [0.9998914  0.99989822 0.9997567  0.99957306 0.99923739]\n",
      " [1.00017951 1.00045863 1.00093798 1.0018828  1.00369247]\n",
      " [1.000155   1.0000674  1.00019075 1.00030473 1.00059805]\n",
      " [1.00033041 1.00066765 1.00129103 1.00252667 1.00529605]\n",
      " [1.00034342 1.00050861 1.00094403 1.00199487 1.00399282]\n",
      " [0.99978475 0.99956334 0.9992096  0.99829814 0.99664834]\n",
      " [1.00013188 1.00032368 1.00049927 1.00107156 1.00215618]\n",
      " [1.00005801 1.0000602  1.0000457  1.00031812 1.00064413]\n",
      " [1.00001605 1.0002098  1.00043082 1.00090035 1.00180221]\n",
      " [1.00022539 1.00037394 1.00075186 1.00143406 1.00303776]\n",
      " [0.99971533 0.99946559 0.99892672 0.99792988 0.99583671]\n",
      " [1.00022302 1.00056862 1.00099346 1.00187364 1.00370152]\n",
      " [1.00028141 1.00046677 1.00092421 1.00173599 1.00346928]\n",
      " [1.00010214 1.00021919 1.00053253 1.00105638 1.00227905]\n",
      " [1.00014901 1.0001487  1.00027595 1.00041534 1.00091651]\n",
      " [0.99983768 0.99982777 0.99968332 0.99936347 0.9986465 ]\n",
      " [1.00010878 1.00007196 0.99995438 0.999889   0.99976738]\n",
      " [0.99989474 0.99976269 0.99940174 0.99882276 0.9976165 ]\n",
      " [1.0000979  1.00001841 0.99995571 1.00001514 1.00001652]\n",
      " [1.00000019 1.00002118 1.00005118 1.00000423 1.00011701]\n",
      " [1.00004479 1.00004026 1.00012063 1.00027524 1.00062729]\n",
      " [0.99993256 0.99992838 0.9998463  0.99960582 0.99920491]]\n",
      "completed in 0.682 sec\n"
     ]
    }
   ],
   "source": [
    "tstart = time()\n",
    "print(minimize_de_crossover(rosenbrock, x4, atol = 1e-6, s=.9, cr = .7, bounds = None, crossover = True))\n",
    "print(f\"completed in {(time() - tstart):.3g} sec\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "74aa829a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.00000026 1.0000006  1.00000085 1.00000116 1.0000016 ]\n",
      " [1.0000003  1.00000054 1.00000104 1.00000137 1.00000262]\n",
      " [0.99999946 0.99999916 0.99999804 0.99999592 0.99999237]\n",
      " [0.99999931 0.9999992  0.99999824 0.99999663 0.99999273]\n",
      " [0.99999986 0.99999968 0.99999945 0.99999947 0.99999849]\n",
      " [0.99999946 0.99999899 0.99999846 0.99999734 0.99999522]\n",
      " [1.00000058 1.00000104 1.00000199 1.00000356 1.00000772]\n",
      " [1.00000036 1.00000064 1.00000127 1.00000188 1.00000351]\n",
      " [1.0000001  1.00000072 1.00000156 1.00000364 1.00000704]\n",
      " [0.99999973 1.00000003 1.00000034 1.00000053 1.00000074]\n",
      " [0.99999914 0.99999882 0.99999794 0.99999626 0.99999308]\n",
      " [1.00000052 1.00000072 1.00000137 1.00000233 1.00000391]\n",
      " [0.9999997  0.99999953 0.99999854 0.99999663 0.9999927 ]\n",
      " [0.99999947 0.99999904 0.99999803 0.99999568 0.99999129]\n",
      " [0.99999989 0.99999968 0.99999952 0.99999917 0.99999908]\n",
      " [1.00000039 1.00000057 1.00000122 1.00000222 1.00000477]\n",
      " [0.99999951 0.99999911 0.99999871 0.99999753 0.99999473]\n",
      " [0.99999969 0.99999992 0.99999995 1.00000031 1.00000076]\n",
      " [1.00000022 1.00000074 1.00000138 1.00000297 1.00000566]\n",
      " [1.00000023 1.00000049 1.00000087 1.00000098 1.00000178]\n",
      " [1.00000037 1.0000005  1.00000146 1.00000294 1.00000693]\n",
      " [0.99999983 1.00000005 1.00000039 1.00000087 1.00000205]\n",
      " [0.99999994 1.00000004 1.00000053 1.00000116 1.00000286]\n",
      " [1.00000029 1.00000043 1.00000085 1.00000138 1.00000293]\n",
      " [1.         1.00000024 1.00000038 1.00000121 1.00000257]\n",
      " [1.00000015 1.0000002  1.00000081 1.00000102 1.00000224]\n",
      " [0.99999956 0.99999904 0.99999881 0.99999754 0.99999479]\n",
      " [0.99999962 0.99999904 0.99999786 0.99999505 0.9999902 ]\n",
      " [1.00000004 1.00000003 1.00000047 1.00000011 1.00000047]\n",
      " [0.99999926 0.99999835 0.99999707 0.99999365 0.99998745]]\n",
      "completed in 0.295 sec\n"
     ]
    }
   ],
   "source": [
    "tstart = time()\n",
    "print(minimize_de_crossover(rosenbrock, x4, atol = 1e-6, s=.9, cr = .7, bounds = None, crossover = False))\n",
    "print(f\"completed in {(time() - tstart):.3g} sec\")\n",
    "\n",
    "#the minimization actually takes longer with crossover stage included \n",
    "#both also seem stable for the amount of population members we have"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e333abe",
   "metadata": {},
   "source": [
    "### <font color='blue'>Exercise 4 (6 points): Implementing the $\\chi^2$ function  and finding parameter values that minimize $\\chi^2$ function of supernovae type Ia magnitudes data given model parameters</font>\n",
    "\n",
    "### Background: supernovae type Ia as cosmological lighthouses and probes\n",
    "\n",
    "The *apparent magnitude* of a source of [absolute magnitude](https://astronomy.swin.edu.au/cosmos/a/Absolute+Magnitude) $M$ predicted by a cosmology model with a given values of $H_0$, $\\Omega_{\\rm m0}$, $\\Omega_\\Lambda$ is \n",
    "\n",
    "$$m= M +5\\log_{10}d_L(z,\\Omega_{\\rm m0},\\Omega_\\Lambda) + 25.$$\n",
    "\n",
    "Here $d_L$ can be computed using the function that was implemented in homework 3 or the corresponding AstroPy function. \n",
    "\n",
    "Supernovae type Ia that result from a thermonuclear explosion of a white dwarf star occur, their peak luminosity can comparable to luminosity of their entire host galaxy. Such supernovae can be observed and their apparent magnitude at peak brightness, $m_{\\rm SNIa}$, and redshift, $z$, can be measured. If we assume that all such supernovae have the same *intrinsic* luminosity at peak brightness corresponding to the absolute magnitude at peak brightness, $M_0$, we can predict the magnitude using equation for $m$ above and assuming some values for $M_0$, $H_0$, $\\Omega_{\\rm m0}$, $\\Omega_\\Lambda$. \n",
    "\n",
    "A difference between the measured, $m_{\\rm obs}$, and model prediction $m_{\\rm pred}$ can thus be written as \n",
    "$$\n",
    "\\Delta m=m_{\\rm obs} - m_{\\rm pred} =m_{\\rm obs} - M_0 - 5\\log_{10}d_L(z,\\Omega_{\\rm m0},\\Omega_\\Lambda)- 25.\n",
    "$$\n",
    "\n",
    "The best-fit parameters $M_0$, $\\Omega_{\\rm m0}$, and $\\Omega_\\Lambda$ can be determine by finding the minimum of the $\\chi^2$ function: \n",
    "\n",
    "$$\\chi^2 = \\sum\\limits_{i=0}^{N_{\\rm SN}-1}\\frac{ (m_{i,\\rm obs}-m_{\\rm i,\\rm pred})^2}{\\sigma_{m_i}^2},$$\n",
    "\n",
    "where $N_{\\rm SN}$ is the number of supernovae type Ia in the sample and $\\sigma_{m_i}$ is uncertainty of the apparent magnitude measurement $m_{i,\\rm obs}$.\n",
    "\n",
    "Parameter $M_0$ tells us what the intrinsic luminosity of the supernovae type Ia is, while $\\Omega_{\\rm m0}$ and $\\Omega_\\Lambda$ characterize the mean density of matter and dark energy in the Universe. So by determing their best-fit values for the supernova measurements we are learning about what our Universe is made of. \n",
    "\n",
    "***Note:*** The sum in the equation for $\\chi^2$ above can be efficiently computing using NumPy function `np.sum` if $m_{\\rm pred}$ and $m_{i,\\rm obs}$ are arrays. You can use the `d_l_astropy` function from hw 3 to compute $d_L$ and $m_{\\rm pred}$. This function allows you to compute distances for an array of redshifts in a single call. \n",
    "\n",
    "\n",
    "***Note*** that $d_L$ is proportional to $c/H_0$, which means that we can write $\\log_{10}d_L = \\log_{10}(c/H_0)\\tilde{d}_L = \\log_{10}(c/H_0) + \\log_{10}\\tilde{d}_L$. At the same time $\\log_{10}(c/H_0)=\\log_{10}c - \\log_{10}H_0$. So we cannot independently determine $M_0$ and $H_0$ because they enter the above equation as a linear combination $-M_0 + 5\\log_{10}H_0$ and we can only determine this combination, not $M_0$ and $H_0$ separately. Alternatively, we can fix $H_0$ to say $70$ km/s/Mpc and only $M_0$ is determined from the data. \n",
    "\n",
    "### Tasks\n",
    "\n",
    "**4a. (4 points)** Implement a function that computes the $\\chi^2$ function above using the supernovae data that is read by the code below. You can pass this data via `*args` to the $\\chi^2$ function. Use the Differential Evolution function implemented and tested in exercise 2 to get the values of $M_0$, $\\Omega_{\\rm m0}$, and $\\Omega_\\Lambda$ that minimize $\\chi^2$. Print our these values and the minimum value of $\\chi^2$ itself.  \n",
    "\n",
    "**4b. (1 point)** Make sure that minimization results make sense. Use Matplotlib to overplot $m_{\\rm pred}(z)$ for a grid of $z$ values as a line over $m_{\\rm obs}$ and $z$ measurements plotted as a scatter plot using the supernovae type Ia data that is read below similarly to what you did in hw 2 with the parameters you determined by trial and error. Make sure that the model line for the \"best fit\" parameters returned by the DE function goes close to the points.\n",
    "\n",
    "**4c. (1 point)** A model is considered to be a good fit to the data, if $\\chi^2/(N_{\\rm data}-N_{\\rm param})$, where $N_{\\rm data}$ is the number of measurments used ($=740$ here) and $N_{\\rm params}$ is the number of model parameters ($=3$ here) is close to 1.0 (say it is $\\approx 1\\pm 0.5$). Based on this, briefly discuss whether the model with the best-fit values of parameters you derived is a good fit to the data according to this criterion. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42398d0f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e83beef7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "57f0ea16",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "read sample of 740 supernovae...\n"
     ]
    }
   ],
   "source": [
    "#zsn, msn, emsn are redshift of SNia, its apparent B-band magnitude, and emsn is magnitude error\n",
    "zsn, msn, emsn = np.loadtxt('https://astro.uchicago.edu/~andrey/classes/a211/data/jla_lcparams.txt', \n",
    "                                               usecols=(1, 4, 5), unpack=True)\n",
    "\n",
    "print(\"read sample of %d supernovae...\"%(np.size(zsn)))\n",
    "\n",
    "from astropy.cosmology import LambdaCDM\n",
    "import astropy.units as u\n",
    "\n",
    "def d_l_astropy(z, H0, om0, oml):\n",
    "    cosmo = LambdaCDM(H0 = H0, Om0 = om0, Ode0 = oml)\n",
    "    return cosmo.luminosity_distance(z=z) / u.Mpc\n",
    "\n",
    "def chi_squared(x, *args):\n",
    "    M0 = x[0]\n",
    "    M0 = np.ones(len(msn))* M0\n",
    "    array25 = np.ones(len(msn)) * 25\n",
    "    Om0 = x[1]\n",
    "    Oml = x[2]\n",
    "    mpred = np.zeros(len(msn))\n",
    "    sigma2 = emsn**2\n",
    "    dl = d_l_astropy(zsn, 70, Om0, Oml)\n",
    "    mpred = M0 + 5*np.log10(dl) + array25\n",
    "    difference2 = (msn - mpred)**2 / sigma2\n",
    "    chi2 = np.sum(difference2)\n",
    "    return chi2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7acee49e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-19.05027037   0.37478176   0.32217756]\n",
      " [-19.05027048   0.37478176   0.32217819]\n",
      " [-19.05027039   0.37478137   0.32217745]\n",
      " [-19.05027038   0.37478166   0.32217773]\n",
      " [-19.0502702    0.37478122   0.32217631]\n",
      " [-19.05027048   0.3747821    0.32217855]\n",
      " [-19.05027031   0.37478201   0.32217751]\n",
      " [-19.05027047   0.37478209   0.32217838]\n",
      " [-19.05027042   0.37478182   0.32217796]\n",
      " [-19.05027037   0.37478129   0.32217714]\n",
      " [-19.05027038   0.37478169   0.32217765]\n",
      " [-19.05027045   0.37478155   0.32217772]\n",
      " [-19.05027051   0.37478222   0.3221787 ]\n",
      " [-19.05027034   0.37478188   0.32217768]\n",
      " [-19.05027048   0.37478156   0.3221778 ]\n",
      " [-19.05027059   0.37478218   0.32217902]\n",
      " [-19.05027045   0.37478158   0.32217765]\n",
      " [-19.05027039   0.37478151   0.32217725]\n",
      " [-19.05027045   0.37478173   0.32217793]\n",
      " [-19.0502703    0.37478121   0.3221768 ]]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "Mmin = -25\n",
    "Mmax = 0\n",
    "Omin = 0\n",
    "Omax = 1\n",
    "npop = 20\n",
    "x2 = np.zeros(shape = (npop, 3))\n",
    "bounds = [[-25 , 0], [0, 1], [0,1]]\n",
    "bounds = np.array(bounds)\n",
    "for i in range(0, npop): \n",
    "    x2[i, 0] = Mmin + (Mmax - Mmin)* np.random.uniform(0, 1)\n",
    "    x2[i, 1] = Omin + (Omax - Omin)* np.random.uniform(0, 1)\n",
    "    x2[i, 2] = Omin + (Omax - Omin)* np.random.uniform(0, 1)\n",
    "print(minimize_de(chi_squared, x2, atol = 1e-6, s=.9, bounds = bounds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "ef8b6442",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.212471239026137\n"
     ]
    }
   ],
   "source": [
    "x = np.array([-19.05027, .37478, .32217])#parameters corresponding to our minimum chi2 parameter calculations above.\n",
    "reduced_chi = chi_squared(x) / 737\n",
    "print(reduced_chi)\n",
    "\n",
    "#this fit is not that good, as the reduced chi squared is still 6, \n",
    "#which is much larger than 1 \n",
    "#from the graph, part of the reason this appers to be true potenitally \n",
    "#is that the errors on the redshifts are so small\n",
    "# so a 3 parameter model might not be able to hit all of those errors very well. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a89ba46b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1372dbe10>]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 960x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.errorbar(zsn, msn, yerr = emsn, fmt='o', zorder = 1)\n",
    "M0 = np.ones(len(msn)) * -19.05027\n",
    "M1 = np.ones(len(msn)) * -19\n",
    "array25 = np.ones(len(msn)) * 25\n",
    "\n",
    "mpred = M0 + 5*np.log10(d_l_astropy(zsn, 70, .37478, .32217)) + array25\n",
    "mpred1 =M1 + 5*np.log10(d_l_astropy(zsn, 70, .3, .7)) + array25\n",
    "plt.plot(np.sort(zsn), np.sort(mpred), color = 'r', zorder = 2)\n",
    "plt.plot(np.sort(zsn), np.sort(mpred1), color = 'g', zorder = 3)\n",
    " \n",
    "#the fit does seem to make sense, and looks very good. \n",
    "# I also plotted my predicition for good values from the last homework (in green)\n",
    "#and the new, minimized chi squared graph does indeed look better, as expected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e170736d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
